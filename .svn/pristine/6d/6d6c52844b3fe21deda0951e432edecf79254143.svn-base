using Engine.Factories;
using Engine.Models;
using System.Linq;
using Engine.EventArgs;
using System;
using Engine.Actions;

namespace Engine.ViewModels
{
    public class GameSession : BaseNotificationClass
    {
        public event EventHandler<GameMessagesEventArgs> OnMessageRaised;
        
        private Location _currentLocation;
        private Monster _currentMonster;
        private Trader _currentTrader;
        private Player _currentPlayer;

        public World CurrentWorld { get; }
        public Player CurrentPlayer 
        {
            get { return _currentPlayer; }
            set 
            {
                if (_currentPlayer != null)
                {
                    _currentPlayer.OnActionPerformed -= OnCurrentPlayerPerformedAction;
                    _currentPlayer.OnLevelUp -= OnCurrentPlayerLevelUp;
                    _currentPlayer.OnKilled -= OnCurrentPlayerKilled;
                }
                _currentPlayer = value;
                if(_currentPlayer != null)
                {
                    _currentPlayer.OnActionPerformed += OnCurrentPlayerPerformedAction;
                    _currentPlayer.OnLevelUp += OnCurrentPlayerLevelUp;
                    _currentPlayer.OnKilled += OnCurrentPlayerKilled;
                }
            } 
        }

        public Location CurrentLocation
        {
            get { return _currentLocation; }
            set
            {
                _currentLocation = value;

                OnPropertyChanged();
                OnPropertyChanged(nameof(HasLocationToNorth));
                OnPropertyChanged(nameof(HasLocationToEast));
                OnPropertyChanged(nameof(HasLocationToWest));
                OnPropertyChanged(nameof(HasLocationToSouth));

                CompleteQuestAtLocation();
                GivePlayerQuestsAtLocation();
                GetMonsterAtLocation();

                CurrentTrader = CurrentLocation.TraderHere;
            }
        }   

        public Monster CurrentMonster
        {
            get { return _currentMonster; }
            set
            {
                if (_currentMonster != null)
                {
                    _currentMonster.OnKilled -= OnCurrentMonsterKilled;
                }

                _currentMonster = value;

                if (_currentMonster != null)
                {
                    _currentMonster.OnKilled += OnCurrentMonsterKilled;
                    RaiseMessage("");
                    RaiseMessage($"You see a {CurrentMonster.Name} here!");
                }
                            
                OnPropertyChanged();
                OnPropertyChanged(nameof(HasMonster));
            }   
        }

        public Trader CurrentTrader
        {
            get { return _currentTrader; }
            set
            {
                _currentTrader = value;

                OnPropertyChanged();
                OnPropertyChanged(nameof(HasTrader));
            }
        }

        public bool HasLocationToNorth => CurrentWorld.LocationAt(CurrentLocation.XCoordinate, CurrentLocation.YCoordinate + 1) != null;
        public bool HasLocationToEast => CurrentWorld.LocationAt(CurrentLocation.XCoordinate + 1, CurrentLocation.YCoordinate) != null;
        public bool HasLocationToSouth => CurrentWorld.LocationAt(CurrentLocation.XCoordinate, CurrentLocation.YCoordinate - 1) != null;
        public bool HasLocationToWest => CurrentWorld.LocationAt(CurrentLocation.XCoordinate - 1, CurrentLocation.YCoordinate) != null;

        public bool HasMonster => CurrentMonster != null;

        public bool HasTrader => CurrentTrader != null;

        public GameSession()
        {
            CurrentPlayer = new Player("*Name*", "Peasant", 0, 10, 10, 0);

            if (!CurrentPlayer.Weapons.Any())
            {
                CurrentPlayer.AddItemToInventory(ItemFactory.CreateGameItem(1001));
            }

            CurrentWorld = WorldFactory.CreateWorld();

            CurrentLocation = CurrentWorld.LocationAt(0, 0);
        }

        public void MoveNorth()
        {
            if (HasLocationToNorth)
            {
                CurrentLocation = CurrentWorld.LocationAt(CurrentLocation.XCoordinate, CurrentLocation.YCoordinate + 1);
            }
        }

        public void MoveEast()
        {
            if (HasLocationToEast)
            {
                CurrentLocation = CurrentWorld.LocationAt(CurrentLocation.XCoordinate + 1, CurrentLocation.YCoordinate);
            }
        }

        public void MoveSouth()
        {
            if (HasLocationToSouth)
            {
                CurrentLocation = CurrentWorld.LocationAt(CurrentLocation.XCoordinate, CurrentLocation.YCoordinate - 1);
            }
        }

        public void MoveWest()
        {
            if (HasLocationToWest)
            {
                CurrentLocation = CurrentWorld.LocationAt(CurrentLocation.XCoordinate - 1, CurrentLocation.YCoordinate);
            }
        }

        private void CompleteQuestAtLocation()
        {
            foreach(Quests quests in CurrentLocation.QuestsAvailableHere)
            {
                QuestStatus questToComplete =
                    CurrentPlayer.Quests.FirstOrDefault(q => q.PlayerQuest.ID == quests.ID && !q.IsCompleted);

                if(questToComplete != null)
                {
                    if (CurrentPlayer.HasAllTheseItems(quests.ItemsToComplete))
                    {
                        //Fjerne de relevante quest ting så questen kan blive gennemført
                        foreach (ItemQuantity itemQuantity in quests.ItemsToComplete)
                        {
                            for (int i = 0; i < itemQuantity.Quantity; i++)
                            {
                                CurrentPlayer.RemoveItemFromInventory(CurrentPlayer.Inventory.First(item => item.ItemTypeID == itemQuantity.ItemID));
                            }
                        }

                        RaiseMessage("");
                        RaiseMessage($"You have competed the {quests.Name} quest!");

                        //Giver spilleren belønning

                        RaiseMessage($"You recieve {quests.RewardExperiencePoints} experience!");
                        CurrentPlayer.AddExperience(quests.RewardExperiencePoints);

                        RaiseMessage($"And you recieve {quests.RewardGold} gold!");
                        CurrentPlayer.ReceiveGold(quests.RewardGold);

                        foreach(ItemQuantity itemQuantity in quests.RewardItems)
                        {
                            GameItem rewardItem = ItemFactory.CreateGameItem(itemQuantity.ItemID);
                            CurrentPlayer.AddItemToInventory(rewardItem);
                            RaiseMessage($"And a {rewardItem.Name}!");
                        }
                        //Sætter Questen som gennemført
                        questToComplete.IsCompleted = true;

                    }
                }
            }
        }

        private void GivePlayerQuestsAtLocation() 
        { 
            foreach(Quests quests in CurrentLocation.QuestsAvailableHere) 
            { 
                if(!CurrentPlayer.Quests.Any(q => q.PlayerQuest.ID == quests.ID)) 
                {
                    CurrentPlayer.Quests.Add(new QuestStatus(quests));

                    RaiseMessage("");
                    RaiseMessage($"You have recieved '{quests.Name}'");
                    RaiseMessage(quests.Description);

                    RaiseMessage("Return with:");
                    foreach(ItemQuantity itemQuantity in quests.ItemsToComplete)
                    {
                        RaiseMessage($" {itemQuantity.Quantity} {ItemFactory.CreateGameItem(itemQuantity.ItemID).Name}");
                    }

                    RaiseMessage("And you will recieve:");
                    RaiseMessage($" {quests.RewardExperiencePoints} experience");
                    RaiseMessage($" {quests.RewardGold} Gold");
                    foreach     (ItemQuantity itemQuantity in quests.RewardItems)
                    {
                        RaiseMessage($" {itemQuantity.Quantity} {ItemFactory.CreateGameItem(itemQuantity.ItemID).Name}");
                    }
                }
            }
        }

        private void GetMonsterAtLocation()
        {
            CurrentMonster = CurrentLocation.GetMonster();
        }

        
        public void AttackCurrentMonster()
        {
            // Guard Clause - Så man kan ikke angrebe og skabe fejl hvis man ikke har et våben valgt. 
            if (CurrentPlayer.CurrentWeapon == null)
            {
                RaiseMessage("You must select a weapon to be able to attack");
                return;
            }
            //Damage to monster
            CurrentPlayer.UseCurrentWeaponOn(CurrentMonster);
           
            // Når monster dør
            if(CurrentMonster.IsDead)
            {
              
                // Derefter nyt monster
                GetMonsterAtLocation();
            }
            else
            {
                // Monster angriber
                int damageToPlayer = RandomNumberGenerator.NumberBetween(CurrentMonster.MinimumDamage, CurrentMonster.MaximumDamage);

                if(damageToPlayer == 0)
                {
                    RaiseMessage("The incoming attack misses you!");
                }
                else
                {
                    RaiseMessage($"{CurrentMonster.Name} hits you for {damageToPlayer} damage");
                    CurrentPlayer.TakeDamage(damageToPlayer);
                }
            }
        }
       
        private void OnCurrentPlayerPerformedAction(Object sender, string result)
        {
            RaiseMessage(result);
        }
        public void OnCurrentPlayerKilled(object sender, System.EventArgs eventArgs)
        {
            RaiseMessage("");
            RaiseMessage("Oh no, you have been killed!");
            CurrentLocation = CurrentWorld.LocationAt(0, -1); // Spilleren bliver sendt tilbage til start (Midlertidig) Jeg overvejer at sende dem til en sekluderet slutskærm.
            CurrentPlayer.FullHeal();// Healer spilleren
        }
        public void OnCurrentMonsterKilled(object sender, System.EventArgs eventArgs)
        {
            RaiseMessage("");
            RaiseMessage($"You defeated the {CurrentMonster.Name}!");

            RaiseMessage($"You get {CurrentMonster.RewardExperiencePoints} experience for the {CurrentMonster.Name},");
            CurrentPlayer.AddExperience(CurrentMonster.RewardExperiencePoints);

            RaiseMessage($" You find {CurrentMonster.Gold} gold!");
            CurrentPlayer.ReceiveGold(CurrentMonster.Gold);
          
            foreach (GameItem gameItem in CurrentMonster.Inventory)
            {
                RaiseMessage($"And one {gameItem.Name}");
                CurrentPlayer.AddItemToInventory(gameItem);
            }
        }
        public void OnCurrentPlayerLevelUp(object sender, System.EventArgs eventArgs)
        {
            RaiseMessage($"You are now level {CurrentPlayer.Level}!");
        }

        private void RaiseMessage(string message)
        {
            OnMessageRaised?.Invoke(this, new GameMessagesEventArgs(message));
        }
    }
}
